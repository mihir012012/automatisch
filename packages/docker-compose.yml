version: "3.9"
services:
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
    # - ./frontend-project/src:/frontend/src
      - ./web:/react
      - /web/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
      - REACT_APP_GRAPHQL_URL=http://localhost:3000/graphql
      # - HTTPS=true
      - REACT_APP_BASE_URL=http://localhost:3001
      - REACT_APP_NOTIFICATIONS_URL=https://notifications.automatisch.io
    depends_on:
      - backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    ports:
      - "3001:3001"
    volumes:
    # - ./frontend-project/src:/frontend/src
      - ./backend:/backend
      - /backend/node_modules
    environment:
      - NODE_ENV=development
      - HOST=localhost
      - PROTOCOL=http
      - PORT=3000
      - WEB_APP_URL=http://localhost:3001
      - WEBHOOK_URL=http://localhost:3000
      - APP_ENV=development
      - POSTGRES_DATABASE=automatisch_development
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=localhost
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_ENABLE_SSL=false
      - ENCRYPTION_KEY=sample-encryption-key
      - WEBHOOK_SECRET_KEY=sample-webhook-key
      - APP_SECRET_KEY=sample-app-secret-key
      - REDIS_PORT=6379
      - REDIS_HOST=127.0.0.1
      - REDIS_TLS=true
      - ENABLE_BULLMQ_DASHBOARD=false
    depends_on:
      - postgres
      - redis
  service:
    build:
      context: ./backend
      dockerfile: Dockerfile.service
    volumes:
    # - ./frontend-project/src:/frontend/src
      - ./backend:/backend1
      - /backend/node_modules
    environment:
      - NODE_ENV=development
      - HOST=localhost
      - PROTOCOL=http
      - PORT=3000
      - WEB_APP_URL=http://localhost:3001
      - WEBHOOK_URL=http://localhost:3000
      - APP_ENV=development
      - POSTGRES_DATABASE=automatisch_development
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=localhost
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_ENABLE_SSL=false
      - ENCRYPTION_KEY=sample-encryption-key
      - WEBHOOK_SECRET_KEY=sample-webhook-key
      - APP_SECRET_KEY=sample-app-secret-key
      - REDIS_PORT=6379
      - REDIS_HOST=127.0.0.1
      - REDIS_TLS=true
      - ENABLE_BULLMQ_DASHBOARD=false
    depends_on:
      - backend
  postgres:
    image: postgres:14.5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=dbname
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: 'redis:7.0.4'
    volumes:
      - redis_data:/data
volumes:
  postgres_data:
  redis_data:
